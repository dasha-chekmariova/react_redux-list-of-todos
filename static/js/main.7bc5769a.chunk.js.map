{"version":3,"sources":["api/api.ts","store/actions.ts","store/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","store/index.ts","index.tsx"],"names":["url","getTodos","a","fetch","response","json","getUser","userId","deleteUser","method","SET_TODOS","GET_USER","getTodosSelector","state","todos","getUserSelector","user","TodoList","dispatch","useDispatch","useState","inputValue","setInputValue","optionValue","setOptionValue","hasLoadingError","setHasLoadingError","render","setRender","lowerInputValue","toLowerCase","filterTodo","useSelector","filter","todo","title","toLocaleLowerCase","includes","useEffect","loadTodosFromServer","todosFromServer","type","payload","error","deleteTodoFromServer","id","finishTodo","currentTodo","completed","filterSelect","className","value","placeholder","onChange","event","currentTarget","map","classname","checked","readOnly","onClick","CurrentUser","clear","selectedUser","loadUserFromServer","userFromServer","name","email","phone","App","selectedUserId","setSelectedUserId","initialState","loading","message","store","createStore","action","ReactDOM","document","getElementById"],"mappings":"+UAAMA,EAAM,oCAECC,EAAQ,uCAAG,4BAAAC,EAAA,sEACCC,MAAM,GAAD,OAAIH,EAAJ,WADN,cAChBI,EADgB,yBAGfA,EAASC,QAHM,2CAAH,qDAMRC,EAAO,uCAAG,WAAOC,GAAP,eAAAL,EAAA,sEACEC,MAAM,GAAD,OAAIH,EAAJ,kBAAiBO,IADxB,cACfH,EADe,yBAGdA,EAASC,QAHK,2CAAH,sDAMPG,EAAU,uCAAG,WAAOD,GAAP,eAAAL,EAAA,sEACDC,MAAM,GAAD,OAAIH,EAAJ,kBAAiBO,GAAU,CACrDE,OAAQ,WAFc,cAClBL,EADkB,yBAKjBA,GALiB,2CAAH,sDCdVM,EAAY,YACZC,EAAW,WCDXC,EAAmB,SAACC,GAAD,OAAsBA,EAAMC,OAE/CC,EAAkB,SAACF,GAAD,OAAsBA,EAAMG,M,OCW9CC,EAA4B,SAAC,GAAgB,IAAdV,EAAa,EAAbA,OACpCW,EAAWC,cAEjB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA8CJ,oBAAS,GAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KACA,EAA4BN,oBAAS,GAArC,mBAAOO,EAAP,KAAeC,EAAf,KAEMC,EAAkBR,EAAWS,cAI7BC,EAFQC,YAAYpB,GAGvBqB,QAAO,SAAAC,GAAI,OAAIA,EAAKC,MAAMC,oBACxBC,SAASR,MAEdS,qBAAU,WACR,IACE,IAAMC,EAAmB,uCAAG,4BAAArC,EAAA,sEACID,IADJ,OACpBuC,EADoB,OAG1BtB,EF/BoD,CAC1DuB,KAAM/B,EACNgC,QE6B8BF,IAHE,2CAAH,qDAMzBD,IACA,MAAOI,GACPjB,GAAmB,GAGrBE,GAAU,KACT,CAACD,IAEJ,IAAMiB,EAAoB,uCAAG,WAAOC,GAAP,SAAA3C,EAAA,sEACrBM,EAAWqC,GADU,OAE3BjB,GAAU,GAFiB,2CAAH,sDAqBpBkB,EAhBe,SAACC,GACpB,OAAQxB,GACN,IAAK,SACH,OAAOwB,EAAYd,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKc,aAGzC,IAAK,YACH,OAAOD,EAAYd,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKc,aAGzC,QACE,OAAOD,GAKME,CAAalB,GAEhC,OACE,qBAAKmB,UAAU,WAAf,SACGzB,EACG,iEAEA,qCACE,wCAEA,sBAAKyB,UAAU,2BAAf,UAEE,uBACEA,UAAU,mBACVC,MAAO9B,EACP+B,YAAY,gBACZC,SAAU,SAACC,GACThC,EAAcgC,EAAMC,cAAcJ,UAItC,qBAAKD,UAAU,6BAAf,SACE,yBACEC,MAAO5B,EACP8B,SAAU,SAACC,GACT9B,EAAe8B,EAAMC,cAAcJ,QAHvC,UAOE,wBACEA,MAAM,MADR,iBAMA,wBACEA,MAAM,SADR,oBAMA,wBACEA,MAAM,YADR,4BAUJ,oBAAID,UAAU,iBAAd,SACGJ,EAAWU,KAAI,SAAAtB,GACd,OACE,qBAEEgB,UAAWO,IAAU,iBAAkB,CACrC,0BAA2BvB,EAAKc,UAChC,6BAA8Bd,EAAKc,YAJvC,UAOE,kCACE,uBACEP,KAAK,WACLiB,QAASxB,EAAKc,UACdW,UAAQ,IAEV,4BAAIzB,EAAKC,WAGX,gCACE,wBACEe,UAAU,kDAKVT,KAAK,SACLmB,QAAS,kBAAMhB,EAAqBV,EAAKW,KAP3C,oBAYA,wBACEK,UAAU,iEAKVT,KAAK,SACLmB,QAAS,kBAAMrD,EAAO2B,IAPxB,yBASYA,EAAK3B,eArCd2B,EAAKW,kBC5GnBgB,G,MAA+B,SAAC,GAAuB,IAArBtD,EAAoB,EAApBA,OAAQuD,EAAY,EAAZA,MAC/C5C,EAAWC,cAEjB,EAA8CC,oBAAS,GAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KAEMqC,EAAe/B,YAAYjB,GAgBjC,OAdAuB,qBAAU,WACR,IACE,IAAM0B,EAAkB,uCAAG,4BAAA9D,EAAA,sEACII,EAAQC,GADZ,OACnB0D,EADmB,OAGzB/C,EHjBiD,CACvDuB,KAAM9B,EACN+B,QGe6BuB,IAHE,2CAAH,qDAMxBD,IACA,MAAOrB,GACPjB,GAAmB,MAEpB,CAACnB,IAGF,mCAEIkB,EAEI,qBAAKyB,UAAU,cAAf,SACGa,EAEG,qCACE,oBAAIb,UAAU,qBAAd,SACE,wDACqBa,EAAalB,QAIpC,wBACEJ,KAAK,SACLS,UAAU,iEAKVU,QAASE,EAPX,mBAYA,oBAAIZ,UAAU,oBAAd,SAAmCa,EAAaG,OAChD,mBAAGhB,UAAU,qBAAb,SAAmCa,EAAaI,QAChD,mBAAGjB,UAAU,qBAAb,SAAmCa,EAAaK,WAIlD,eAIN,iDClCGC,EA/BO,WACpB,MAGIjD,mBAAS,GAHb,mBACEkD,EADF,KAEEC,EAFF,KAaA,OACE,sBAAKrB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAU3C,OAXK,SAAC2B,GAAD,OACnBqC,EAAkBrC,EAAK3B,aAarB,qBAAK2C,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGoB,EACC,cAAC,EAAD,CAAa/D,OAAQ+D,EAAgBR,MAbjC,kBACZS,EAAkB,MAaR,2B,+BC3BRC,EAA0B,CAC9BC,SAAS,EACTC,QAAS,GACT5D,MAAO,GACPE,KAAM,IAwCF2D,EAAQC,aArCE,WAEV,IADJ/D,EACG,uDADK2D,EAAcK,EACnB,uCACH,OAAQA,EAAOpC,MACb,KAAK/B,EACH,OAAO,2BACFG,GADL,IAEEC,MAAM,YAAK+D,EAAOnC,WAGtB,KAAK/B,EACH,OAAO,2BACFE,GADL,IAEEG,KAAK,eAAM6D,EAAOnC,WAGtB,QACE,OAAO7B,MAsBE8D,IC1CfG,IAASnD,OACP,cAAC,IAAD,CAAUgD,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.7bc5769a.chunk.js","sourcesContent":["const url = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${url}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${url}/users/${userId}`);\n\n  return response.json();\n};\n\nexport const deleteUser = async (userId: number) => {\n  const response = await fetch(`${url}/todos/${userId}`, {\n    method: 'DELETE',\n  });\n\n  return response;\n};\n","export const SET_TODOS = 'SET_TODOS';\nexport const GET_USER = 'GET_USER';\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: SET_TODOS,\n  payload,\n});\n\nexport const getUserAction = (payload: User): Action => ({\n  type: GET_USER,\n  payload,\n});\n","export const getTodosSelector = (state: RootState) => state.todos;\n\nexport const getUserSelector = (state: RootState) => state.user;\n","import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classname from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteUser, getTodos } from '../../api/api';\nimport { setTodosAction } from '../../store/actions';\nimport { getTodosSelector } from '../../store/selectors';\n\ntype Props = {\n  userId: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ userId }) => {\n  const dispatch = useDispatch();\n\n  const [inputValue, setInputValue] = useState('');\n  const [optionValue, setOptionValue] = useState('');\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [render, setRender] = useState(false);\n\n  const lowerInputValue = inputValue.toLowerCase();\n\n  const todos = useSelector(getTodosSelector);\n\n  const filterTodo = todos\n    .filter(todo => todo.title.toLocaleLowerCase()\n      .includes(lowerInputValue));\n\n  useEffect(() => {\n    try {\n      const loadTodosFromServer = async () => {\n        const todosFromServer = await getTodos();\n\n        dispatch(setTodosAction(todosFromServer));\n      };\n\n      loadTodosFromServer();\n    } catch (error) {\n      setHasLoadingError(true);\n    }\n\n    setRender(false);\n  }, [render]);\n\n  const deleteTodoFromServer = async (id: number) => {\n    await deleteUser(id);\n    setRender(true);\n  };\n\n  const filterSelect = (currentTodo: Todo[]) => {\n    switch (optionValue) {\n      case 'active': {\n        return currentTodo.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return currentTodo.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return currentTodo;\n      }\n    }\n  };\n\n  const finishTodo = filterSelect(filterTodo);\n\n  return (\n    <div className=\"TodoList\">\n      {hasLoadingError\n        ? <p>Oops ... Something went wrong...</p>\n        : (\n          <>\n            <h2>Todos:</h2>\n\n            <div className=\"TodoList__list-container\">\n\n              <input\n                className=\"input is-rounded\"\n                value={inputValue}\n                placeholder=\"Enter a title\"\n                onChange={(event) => {\n                  setInputValue(event.currentTarget.value);\n                }}\n              />\n\n              <div className=\"select is-rounded is-small\">\n                <select\n                  value={optionValue}\n                  onChange={(event) => {\n                    setOptionValue(event.currentTarget.value);\n                  }}\n                >\n\n                  <option\n                    value=\"all\"\n                  >\n                    All\n                  </option>\n\n                  <option\n                    value=\"active\"\n                  >\n                    Active\n                  </option>\n\n                  <option\n                    value=\"completed\"\n                  >\n                    Completed\n                  </option>\n\n                </select>\n\n              </div>\n\n              <ul className=\"TodoList__list\">\n                {finishTodo.map(todo => {\n                  return (\n                    <li\n                      key={todo.id}\n                      className={classname('TodoList__item', {\n                        'TodoList__item--checked': todo.completed,\n                        'TodoList__item--unchecked': !todo.completed,\n                      })}\n                    >\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={todo.completed}\n                          readOnly\n                        />\n                        <p>{todo.title}</p>\n                      </label>\n\n                      <div>\n                        <button\n                          className=\"\n                            TodoList__user-button\n                            button\n                            button--selected\n                          \"\n                          type=\"button\"\n                          onClick={() => deleteTodoFromServer(todo.id)}\n                        >\n                          DELETE\n                        </button>\n\n                        <button\n                          className=\"\n                            TodoList__user-button\n                            TodoList__user-button--selected\n                            button\n                          \"\n                          type=\"button\"\n                          onClick={() => userId(todo)}\n                        >\n                          {`User #${todo.userId}`}\n                        </button>\n                      </div>\n\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getUser } from '../../api/api';\nimport { getUserAction } from '../../store/actions';\nimport { getUserSelector } from '../../store/selectors';\n\ntype Props = {\n  userId: number,\n  clear: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clear }) => {\n  const dispatch = useDispatch();\n\n  const [hasLoadingError, setHasLoadingError] = useState(true);\n\n  const selectedUser = useSelector(getUserSelector);\n\n  useEffect(() => {\n    try {\n      const loadUserFromServer = async () => {\n        const userFromServer = await getUser(userId);\n\n        dispatch(getUserAction(userFromServer));\n      };\n\n      loadUserFromServer();\n    } catch (error) {\n      setHasLoadingError(false);\n    }\n  }, [userId]);\n\n  return (\n    <>\n      {\n        hasLoadingError\n          ? (\n            <div className=\"CurrentUser\">\n              {selectedUser\n                ? (\n                  <>\n                    <h2 className=\"CurrentUser__title\">\n                      <span>\n                        {`Selected user: ${selectedUser.id}`}\n                      </span>\n                    </h2>\n\n                    <button\n                      type=\"button\"\n                      className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                      onClick={clear}\n                    >\n                      Clear\n                    </button>\n\n                    <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n                    <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n                    <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n                  </>\n                )\n                : (\n                  'Loading...'\n                )}\n            </div>\n          )\n          : <p>No users yet</p>\n      }\n    </>\n\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const changeUserId = (todo: Todo) => (\n    setSelectedUserId(todo.userId)\n  );\n\n  const clear = () => (\n    setSelectedUserId(0)\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList userId={changeUserId} />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} clear={clear} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { GET_USER, SET_TODOS } from './actions';\n\nconst initialState: RootState = {\n  loading: false,\n  message: '',\n  todos: [],\n  user: {},\n};\n\nconst reducer = (\n  state = initialState, action: Action,\n) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case GET_USER:\n      return {\n        ...state,\n        user: { ...action.payload },\n      };\n\n    default:\n      return state;\n  }\n};\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({\n  type: FINISH_LOADING,\n  message,\n});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(reducer);\n\nexport default store;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport 'bulma/css/bulma.min.css';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}